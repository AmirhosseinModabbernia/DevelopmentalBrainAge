##Code for Machine Learning -Training-Cross-Validation



sessionInfo()
#R version 3.5.3 (2019-03-11)
#Platform: x86_64-pc-linux-gnu (64-bit)
#Running under: CentOS Linux 7 (Core)

#Matrix products: default
#BLAS/LAPACK: /hpc/packages/minerva-centos7/intel/parallel_studio_xe_2019/compilers_and_libraries_2019.0.117/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so

#locale:
 #[1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 #[3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 #[5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 #[7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 #[9] LC_ADDRESS=C               LC_TELEPHONE=C            
#[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

#attached base packages:
#[1] parallel  stats     graphics  grDevices utils     datasets  methods  
#[8] base     

#other attached packages:
#[1] doParallel_1.0.14 iterators_1.0.10  foreach_1.4.4     caret_6.0-84     
#[5] ggplot2_3.3.3     lattice_0.20-38  

#loaded via a namespace (and not attached):
 #[1] tidyselect_1.1.0   inum_1.0-1         purrr_0.3.4        reshape2_1.4.3    
 #[5] kernlab_0.9-27     splines_3.5.3      colorspace_1.4-1   vctrs_0.3.1       
 #[9] generics_0.0.2     stats4_3.5.3       survival_2.44-1.1  prodlim_2018.04.18
#[13] rlang_0.4.10       ModelMetrics_1.2.2 pillar_1.4.6       glue_1.4.1        
#[17] withr_2.4.1        xgboost_0.82.1     lifecycle_0.2.0    plyr_1.8.4        
#[21] lava_1.6.5         stringr_1.4.0      timeDate_3043.102  munsell_0.5.0     
#[25] gtable_0.3.0       recipes_0.1.5      mvtnorm_1.0-10     codetools_0.2-16  
#[29] class_7.3-15       Rcpp_1.0.7         scales_1.0.0       ipred_0.9-9       
#[33] stabs_0.6-3        stringi_1.4.3      dplyr_1.0.0        grid_3.5.3        
#[37] quadprog_1.5-7     tools_3.5.3        magrittr_1.5       tibble_3.0.3      
#[41] mboost_2.9-1       Formula_1.2-3      crayon_1.3.4       pkgconfig_2.0.2   
#[45] partykit_1.2-4     MASS_7.3-51.4      ellipsis_0.3.1     libcoin_1.0-4     
#[49] Matrix_1.2-18      data.table_1.14.0  nnls_1.4           lubridate_1.7.4   
#[53] gower_0.2.1        R6_2.5.0           rpart_4.1-15       nnet_7.3-12       
#[57] nlme_3.1-137       compiler_3.5.3    





###bayesglm

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


bayesglm_male <- train(x = input_x_male,
  y = input_y_male,method = "bayesglm", trControl = tune_control, preProcess = c("center","scale"))

bayesglm_female <- train(x = input_x_female,
  y = input_y_female,method = "bayesglm", trControl = tune_control, preProcess = c("center","scale"))

save.image("bayesglm_yeo.RData")






###brnn

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


brnn_male <- train(x = input_x_male,
  y = input_y_male,method = "brnn", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(neurons =seq(1,5,1)))




brnn_female <- train(x = input_x_female,
  y = input_y_female,method = "brnn", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(neurons =seq(1,5,1)))


save.image("brnn_yeo.RData")




###enet

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models
#start the clock


enet_male <- train(x = input_x_male,
  y = input_y_male,method = "enet", trControl = tune_control, preProcess = c("center","scale"),
  tuneGrid = expand.grid(fraction = seq(0,1,0.2),lambda=c(0.1,0.01,0.001,0.0001,0.00001)))


enet_female <- train(x = input_x_female,
  y = input_y_female,method = "enet", trControl = tune_control, preProcess = c("center","scale"),
  tuneGrid = expand.grid(fraction = seq(0,1,0.2),lambda=c(0.1,0.01,0.001,0.0001,0.00001)))


save.image("enet_yeo.RData")






###gamboost

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


gamboost_male <- train(x = input_x_male,
  y = input_y_male,method = "gamboost", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mstop =c(50,100,150,200,250),prune =c("yes","no")))





gamboost_female <- train(x = input_x_female,
  y = input_y_female,method = "gamboost", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mstop =c(50,100,150,200,250),prune =c("yes","no")))


save.image("gamboost_yeo.RData")








###gaussprLinear

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


gaussprLinear_male <- train(x = input_x_male,
  y = input_y_male,method = "gaussprLinear", trControl = tune_control, preProcess = c("center","scale"))


gaussprLinear_female <- train(x = input_x_female,
  y = input_y_female,method = "gaussprLinear", trControl = tune_control, preProcess = c("center","scale"))


save.image("gaussprLinear_yeo.RData")






###gaussprPoly

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


gaussprPoly_male <- train(x = input_x_male,
  y = input_y_male,method = "gaussprPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))



gaussprPoly_female <- train(x = input_x_female,
  y = input_y_female,method = "gaussprPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))


save.image("gaussprPoly_yeo.RData")








###gaussprRadial

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


gaussprRadial_male <- train(x = input_x_male,
  y = input_y_male,method = "gaussprRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_male),scaled = TRUE)[1],sigest(as.matrix(input_x_male),scaled = TRUE)[3],length.out=5)))

gaussprRadial_female <- train(x = input_x_female,
  y = input_y_female,method = "gaussprRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5)))


save.image("gaussprRadial_yeo.RData")



###glm


rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters

set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE # FALSE for reproducible results 
  , savePredictions="final"
)

#train models

glm_male <- train(x = input_x_male,
  y = input_y_male,method = "glm", trControl = tune_control, preProcess = c("center","scale"))

glm_female <- train(x = input_x_female,
  y = input_y_female,method = "glm", trControl = tune_control, preProcess = c("center","scale"))



save.image("glm_yeo.RData")




###icr

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


icr_male <- train(x = input_x_male,
  y = input_y_male,method = "icr", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(n.comp=1:5))



icr_female <- train(x = input_x_female,
  y = input_y_female,method = "icr", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(n.comp=1:5))


save.image("icr_yeo.RData")



###kernelpls

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


kernelpls_male <- train(x = input_x_male,
  y = input_y_male,method = "kernelpls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))

kernelpls_female <- train(x = input_x_female,
  y = input_y_female,method = "kernelpls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))

save.image("kernelpls_yeo.RData")





###pcr

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

pcr_male <- train(x = input_x_male,
  y = input_y_male,method = "pcr", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))



pcr_female <- train(x = input_x_female,
  y = input_y_female,method = "pcr", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(ncomp =seq(1,5,1)))

save.image("pcr_yeo.RData")





###rf

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


rf_male <- train(x = input_x_male,importance=T,
  y = input_y_male,method = "rf", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mtry=c(2,8,40,178,800)))



rf_female <- train(x = input_x_female,importance=T,
  y = input_y_female,method = "rf", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(mtry=c(2,8,40,178,800)))

save.image("rf_yeo.RData")




###rqlasso

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


rqlasso_male <- train(x = input_x_male,
  y = input_y_male,method = "rqlasso", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(lambda=c(0.1,0.0177828,0.0031623,0.0005623,0.0001000)))




rqlasso_female <- train(x = input_x_female,
  y = input_y_female,method = "rqlasso", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(lambda=c(0.1,0.0177828,0.0031623,0.0005623,0.0001000)))

save.image("rqlasso_yeo.RData")








###rvmLinear

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


rvmLinear_male <- train(x = input_x_male,
  y = input_y_male,method = "rvmLinear", trControl = tune_control, preProcess = c("center","scale"))



rvmLinear_female <- train(x = input_x_female,
  y = input_y_female,method = "rvmLinear", trControl = tune_control, preProcess = c("center","scale"))

save.image("rvmLinear_yeo.RData")




###rvmPoly

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


rvmPoly_male <- train(x = input_x_male,
  y = input_y_male,method = "rvmPoly", trControl = tune_control, preProcess = c("center","scale"),
 tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))



rvmPoly_female <- train(x = input_x_female,
  y = input_y_female,method = "rvmPoly", trControl = tune_control, preProcess = c("center","scale"),
 tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001)))

save.image("rvmPoly_yeo.RData")






###rvmRadial

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


rvmRadial_male <- train(x = input_x_male,
  y = input_y_male,method = "rvmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5)))



rvmRadial_female <- train(x = input_x_female,
  y = input_y_female,method = "rvmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5)))

save.image("rvmRadial_yeo.RData")



rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


spls_male <- train(x = input_x_male,
  y = input_y_male,method = "spls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(eta=seq(0,1,0.2),K=seq(1,5,1),kappa=0.5))


spls_female <- train(x = input_x_female,
  y = input_y_female,method = "spls", trControl = tune_control, preProcess = c("center","scale"), 
  tuneGrid = expand.grid(eta=seq(0,1,0.2),K=seq(1,5,1),kappa=0.5))

save.image("spls_yeo.RData")


###svmLinear3

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models


svmLinear3_male <- train(x = input_x_male,
  y = input_y_male,method = "svmLinear3", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(cost=c(0.25,.5,1,2,4,8,16,32,64,128),Loss=c("L1","L2")))




svmLinear3_female <- train(x = input_x_female,
  y = input_y_female,method = "svmLinear3", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(cost=c(0.25,.5,1,2,4,8,16,32,64,128),Loss=c("L1","L2")))


save.image("svmLinear3_yeo.RData")







###svmPoly

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

svmPoly_male <- train(x = input_x_male,
  y = input_y_male,method = "svmPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001),C=c(0.25,.5,1,2,4)))


svmPoly_female <- train(x = input_x_female,
  y = input_y_female,method = "svmPoly", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(degree =1:3,scale =c(10,1,0.1,0.01,0.001),C=c(0.25,.5,1,2,4)))


save.image("svmPoly_yeo.RData")






###svmRadial

rm(list=ls()) 

#Load packages
library(caret)
library(doParallel)
library(kernlab)

#initialize parallel computation
numCores <- detectCores()
cl <- makePSOCKcluster(numCores-5)
registerDoParallel(cl)


#load data


x<-read.csv("data_ml_dev_brainage.csv")
x<-x[,-1]
input_x_male=as.matrix(x[x$SEX==1,2:801])
input_y_male<-as.double(as.matrix(x[x$SEX==1,]$AGE_AT_SCAN))

input_x_female=as.matrix(x[x$SEX==2,2:801])
input_y_female<-as.double(as.matrix(x[x$SEX==2,]$AGE_AT_SCAN))


#train control parameters



set.seed(123)

tune_control <- caret::trainControl(
  method="repeatedcv", 
  number=5, 
  repeats=5,
   # with n folds 
  #index = createFolds(x$AGE_AT_SCAN), # fix the folds
  verboseIter = TRUE, # no training log
  allowParallel = TRUE, # FALSE for reproducible results 
  savePredictions="final"
)

#train models

svmRadial_male <- train(x = input_x_male,
  y = input_y_male,method = "svmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_male),scaled = TRUE)[1],sigest(as.matrix(input_x_male),scaled = TRUE)[3],length.out=5),C=c(0.25,.5,1,2,4)))



svmRadial_female <- train(x = input_x_female,
  y = input_y_female,method = "svmRadial", trControl = tune_control, preProcess = c("center","scale"),
    tuneGrid = expand.grid(sigma=seq(sigest(as.matrix(input_x_female),scaled = TRUE)[1],sigest(as.matrix(input_x_female),scaled = TRUE)[3],length.out=5),C=c(0.25,.5,1,2,4)))


save.image("svmRadial_yeo.RData")
